import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id 'nebula.optional-base' version '5.0.3'  apply false
  id 'com.github.spotbugs' version '2.0.0' apply false
}

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '3.9-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '3.9-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokCommonJavadocs') ? project.getProperty('interlokCommonJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  componentName='Interlok Elasticsearch'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '1.7.28'
  elasticVersion = '7.3.1'
  log4j2Version = '2.12.1'
  junitJupiterVersion = '5.5.1'
  mockitoVersion = '3.0.0'
}


ext.hasGraphViz = { ->
  def app = "dot"
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    app = app + ".exe"
  }
  return System.getenv("PATH").split(File.pathSeparator).any{
    java.nio.file.Paths.get("${it}").resolve(app).toFile().exists()
  }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

task clean(type: Delete) {
  delete project.buildDir
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: "jacoco"
  apply plugin: "nebula.optional-base"
  apply plugin: 'com.github.spotbugs'

  sourceCompatibility = 1.8
  group   = 'com.adaptris'
  version = releaseVersion
  def versionDir = "$buildDir/version"

  repositories {
    mavenCentral()
    maven { url "$defaultNexusRepo" }
    maven { url "$nexusBaseUrl/content/groups/public" }
    maven { url "$nexusBaseUrl/content/groups/interlok" }
  }


  configurations {
    javadoc {}
    offlineJavadocPackages {}
    all*.exclude group: 'c3p0'
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'javamail'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'org.glassfish.hk2.external'
    all*.exclude group: 'xalan', module: 'xalan'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    all*.exclude group: 'org.codehaus.woodstox'
    all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }

  dependencies {
    annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}

    implementation ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
    implementation ("com.adaptris:interlok-common:$interlokCoreVersion") { changing= true}
    implementation ("com.adaptris:interlok-csv:$interlokCoreVersion") { changing=true}
    implementation ("com.jayway.jsonpath:json-path:2.4.0")
    implementation ("com.fasterxml.jackson.core:jackson-databind:2.10.0.pr2")

    implementation ("org.slf4j:slf4j-api:$slf4jVersion")

    implementation ("joda-time:joda-time:2.10.3")

    implementation ("org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticVersion")
    implementation ("org.elasticsearch.client:elasticsearch-rest-client-sniffer:$elasticVersion")

    testAnnotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}

    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:$junitJupiterVersion") {
      because 'allows JUnit 3 and JUnit 4 tests to run'
    }
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.5.1") {
      because 'allows tests to run from IDEs that bundle older version of launcher'
    }

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
    testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")

    testImplementation ('junit:junit:4.12')
    testImplementation ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing= true}
    testImplementation ("org.apache.logging.log4j:log4j-core:$log4j2Version")
    testImplementation ("org.apache.logging.log4j:log4j-1.2-api:$log4j2Version")
    testImplementation ("org.apache.logging.log4j:log4j-api:$log4j2Version")

    testImplementation ("org.mockito:mockito-core:$mockitoVersion")
    testImplementation ("org.mockito:mockito-inline:$mockitoVersion")

    javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
    offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar") { changing= true}
    offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar") { changing= true}
  }


  javadoc {
    configure(options) {
      options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
      options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
      options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
      taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
      options.addStringOption "tagletpath", configurations.javadoc.asPath
    }
  }

  test {
    useJUnitPlatform()
  }

  jacoco {
    toolVersion="0.8.3"
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      html.enabled true
    }
  }

  sourceSets {
    main {
      output.dir(versionDir, builtBy: 'generateVersion')
    }
  }

  // Generate the META-INF/adaptris-version file
  task generateVersion {
    doLast {
      def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
      versionFile.getParentFile().mkdirs()
      ant.propertyfile(file: versionFile) {
        entry(key: 'component.name', value: componentName)
        entry(key: 'build.version', value: releaseVersion)
        entry(key: 'groupId', value: project.group)
        entry(key: 'artifactId', value: project.name)
        entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      }
    }
  }


  task offlinePackageList(type: Copy) {
    description 'Build an offline package-list for javadocs'
    group 'Documentation'

    project.configurations.offlineJavadocPackages.collect { dependency ->
      from(zipTree(dependency)) {
        into dependency.name
      }
    }
    include "package-list"
    into offlineJavadocPackageDir
  }

  spotbugs {
    // showProgress = "true"
    effort = "max"
    // Ignore failures?
    // ignoreFailures = false

    // We only care about "high priority" issues...
    reportLevel = "high"
  }

  // disable spotbugsTests which checks our test code..
  spotbugsTest.enabled = false

  tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
      xml.enabled = false
      html.enabled = true
    }
    excludeFilter = new File("$rootDir/gradle/spotbugs-exclude.xml")
  }

  check.dependsOn jacocoTestReport
  javadoc.dependsOn offlinePackageList
}
