import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id 'nebula.optional-base' version '6.0.0'  apply false
  id "io.freefair.lombok" version "5.3.3.3" apply false
  id 'com.github.spotbugs' version '4.7.0' apply false
  id 'org.owasp.dependencycheck' version '6.1.6' apply false
}

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '4.0-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '4.0-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokCommonJavadocs') ? project.getProperty('interlokCommonJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  componentName='Interlok Elasticsearch'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '1.7.30'
  elasticVersion = '7.9.3'
  junitJupiterVersion = '5.7.1'
  mockitoVersion = '3.9.0'
}

ext.hasGraphViz = { ->
//  def app = "dot"
//  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//    app = app + ".exe"
//  }
//  return System.getenv("PATH").split(File.pathSeparator).any{
//    java.nio.file.Paths.get("${it}").resolve(app).toFile().exists()
//  }
}

ext.gitBranchNameOrTimestamp = { branchName ->
  if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
    return new Date().format('HH:mm:ss z');
  }
  return branchName;
}

ext.buildInfo = { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
      return gitBranchNameOrTimestamp(branchName);
    }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

task clean(type: Delete) {
  delete project.buildDir
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: "jacoco"
  apply plugin: "nebula.optional-base"
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: "io.freefair.lombok"

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
  group   = 'com.adaptris'
  version = releaseVersion
  def versionDir = "$buildDir/version"
  generateLombokConfig.enabled = false

  repositories {
    mavenCentral()
    maven { url "$defaultNexusRepo" }
    maven { url "$nexusBaseUrl/content/groups/public" }
    maven { url "$nexusBaseUrl/content/groups/interlok" }
  }

  configurations {
    javadoc {}
    offlineJavadocPackages {}
    all*.exclude group: 'c3p0'
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'javamail'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'org.glassfish.hk2.external'
    all*.exclude group: 'xalan', module: 'xalan'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    all*.exclude group: 'org.codehaus.woodstox'
    all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
    // INTERLOK-3197 exclude old javax.mail
    all*.exclude group: 'com.sun.mail', module: 'javax.mail'
    all*.exclude group: 'javax.validation', module: 'validation-api'
    all*.exclude group: 'javax.activation', module: 'activation'
    all*.exclude group: 'javax.activation', module: 'javax.activation-api'

    // INTERLOK-3740 switch from jcraft to com.github.mwiede jsch fork.
    all*.exclude group: 'com.jcraft', module: 'jsch'
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }

  dependencies {
    annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}

    compile ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
    compile ("com.adaptris:interlok-common:$interlokCoreVersion") { changing= true}
    compile ("com.adaptris:interlok-csv:$interlokCoreVersion") { changing=true}
    implementation ("com.jayway.jsonpath:json-path:2.4.0")
    implementation ("com.fasterxml.jackson.core:jackson-databind:2.12.3")
    implementation ("commons-collections:commons-collections:3.2.2")

    implementation ("org.slf4j:slf4j-api:$slf4jVersion")

    implementation ("joda-time:joda-time:2.10.10")

    implementation ("org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticVersion") {
      exclude group: "org.yaml", module: "snakeyaml"
    }
    implementation ("org.elasticsearch.client:elasticsearch-rest-client-sniffer:$elasticVersion") {
      exclude group: "commons-codec", module: "commons-codec"
      exclude group: "org.apache.httpcomponents", module: "httpclient"
    }

    implementation ("org.yaml:snakeyaml:1.28")
    implementation ("commons-codec:commons-codec:1.15")
    implementation ("org.apache.httpcomponents:httpclient:4.5.13")

    testAnnotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}

    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:$junitJupiterVersion") {
      because 'allows JUnit 3 and JUnit 4 tests to run'
    }
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.7.1") {
      because 'allows tests to run from IDEs that bundle older version of launcher'
    }

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
    testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")

    testImplementation ('junit:junit:4.13.2')
    testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
    // exclude any log4j dependencies so that we can just use slf4j simple.
    // works around INTERLOk-3233
    testImplementation "com.adaptris:interlok-stubs:$interlokCoreVersion", {
      changing= true
      exclude group: "org.apache.logging.log4j"
    }

    testImplementation ("org.mockito:mockito-core:$mockitoVersion")
    testImplementation ("org.mockito:mockito-inline:$mockitoVersion")

    javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
    offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar") { changing= true}
    offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar") { changing= true}
  }

  javadoc {
    configure(options) {
      options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
      options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
      options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
      taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
      options.addStringOption "tagletpath", configurations.javadoc.asPath
      options.addBooleanOption "-no-module-directories", true
    }
  }

  test {
    useJUnitPlatform()
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      html.enabled true
    }
  }

  sourceSets {
    main {
      output.dir(versionDir, builtBy: 'generateVersion')
    }
  }

  // Generate the META-INF/adaptris-version file
  task generateVersion {
    doLast {
      def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
      versionFile.getParentFile().mkdirs()
      ant.propertyfile(file: versionFile) {
        entry(key: 'component.name', value: componentName)
        entry(key: 'component.description', value: componentDesc)
        entry(key: 'build.version', value: releaseVersion)
        entry(key: 'groupId', value: project.group)
        entry(key: 'artifactId', value: project.name)
        entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
        entry(key: 'build.info', value: buildInfo())
      }
    }
  }

  task offlinePackageList(type: Copy) {
    description 'Build an offline package-list for javadocs'
    group 'Documentation'

    project.configurations.offlineJavadocPackages.collect { dependency ->
      from(zipTree(dependency)) {
        into dependency.name
      }
    }
    include "package-list"
    include "element-list"
    into offlineJavadocPackageDir
  }

  spotbugsMain {
    effort = "max"
    reportLevel = "high"
    // showProgress = "true"
    effort = "max"
    // Ignore failures?
    // ignoreFailures = false
    reports {
      xml {
        enabled = false
      }
      html {
        enabled = true
      }
    }
 }

  dependencyCheck  {
    suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
    skipConfigurations = [ "antSql", "spotbugs", "umlDoclet", "offlineJavadocPackages", "javadoc", "jacocoAnt", "jacocoAgent", "spotbugsPlugins", "spotbugsSlf4j" ]
    formats = [ "HTML", "JUNIT" ]
    junitFailOnCVSS = 7.0
    failBuildOnCVSS = 7.0
    analyzers {
      assemblyEnabled=false
    }
  }

  // disable spotbugsTests which checks our test code..
  spotbugsTest.enabled = false

  task lgtmCompile(type: JavaCompile, dependsOn: delombok) {
    group 'Build'
    description 'Compile for lgtm'

    source = sourceSets.main.extensions.delombokTask
    destinationDir = sourceSets.main.java.outputDir
    classpath = project.sourceSets.main.compileClasspath
  }

  check.dependsOn jacocoTestReport
  javadoc.dependsOn offlinePackageList
}
