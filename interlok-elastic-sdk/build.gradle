ext {
  componentName='Interlok Storage/Elastic: SDK Client'
  componentDesc="Producing to Elasticsearch using their SDK"
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  elasticVersion = '7.17.17'
  jacksonVersion = '2.16.2'
}

dependencies {
  api project(':interlok-elastic-common')
  api ("com.adaptris:interlok-apache-http:$interlokCoreVersion") { changing= true}
  api ("com.adaptris:interlok-apache-http-async:$interlokCoreVersion") { changing= true}
  
  implementation ("co.elastic.clients:elasticsearch-java:$elasticVersion") {
    exclude group: "org.eclipse.parsson", module: "parsson"
  }
  implementation ("org.elasticsearch:elasticsearch-x-content:$elasticVersion")
  implementation ("org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticVersion")
  
  implementation ("org.eclipse.parsson:parsson:1.1.5")
  
  // Dependency to platform/BOM
  implementation (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
  implementation ("com.fasterxml.jackson.core:jackson-databind")
  implementation ("com.fasterxml.jackson.dataformat:jackson-dataformat-smile")
  implementation ("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
  implementation ("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

artifacts {
    archives javadocJar
    archives sourcesJar
    archives examplesJar
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }
      artifact examplesJar { classifier "examples" }
      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("externalUrl", "https://www.elastic.co/products/elasticsearch")
        properties.appendNode("target", "3.9.1+")
        properties.appendNode("license", "false")
        properties.appendNode("tags", "elastic,elasticsearch")
        properties.appendNode("readme", "https://github.com/adaptris/interlok-elastic/raw/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-elastic")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete delombokTargetDir
}

clean.dependsOn deleteGeneratedFiles
